LINK: https://github.com/TanakaAkihiro/Cyber-Security-Project1
Quick installation instructions: After cloning the repository, go to directory "mysite" and run commands "python3 manage.py makemigrations", "python3 manage.py migrate" and "python3 init_database.py"
More installation details in README file in the repository.

OWASP top ten list (2017)

FLAW 1: CSRF token

Exact source link:

https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/templates/simplebank/index.html#L18
https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/templates/simplebank/index.html#L37
https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/templates/simplebank/login.html#L3
https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/views.py#L12
https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/views.py#L20
https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/views.py#L31
https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/views.py#L35
https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/views.py#L40

Description of flaw 1:

Currently CSRF tokens are commented out, which means that POST requests are not checked wether they are from malicious attackers or from innocent users.

Fix to flaw 1:

Add {% csrf_token %} template tag into every form of html files and remove @csrf_exempt decorator from the views.py file.


FLAW 2: A1 (2017) Injection

Source link:

https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/views.py#L29-L38

Description of flaw 2:

Currently bank accounts of the user that are listed on the home page are fetched by a SQL query. The implementation is vulnerable to SQL injection attacks, since the attacker could modify the SQL query so that the attacker could gain unauthorized access to the database or to manipulate data. For example, if the attacker sets the value of request.session['user'] to `1 OR 1=1`, the attacker gets all the iban strings from the Account table.

Fix to flaw 2:

Instead of using raw SQL query, we could fetch accounts by using django's built in function filter(), which is commented out here: https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/views.py#L41


FLAW 3: A2 (2017) Broken Authentication

Source link:

https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/models.py#L4-L9

Description of flaw 3:

Currently new users can be created in the python shell (python3 manage.py shell) by importing the model class User and run
`user = User(username="new_user", password="new_user_password")`
`user.save()`
There is nothing implemented to prevent brute force or other automated attacks in the project that makes the attackers able to gain access to users' page.
Moreover, passwords are not checked, if they are strong and unpredictable enough that could make the attacker easier to guess the password.

Fix to flaw 3:

There are several ways to prevent brute force attacks. For example, we could implement a function that blocks requests from an IP address after a certain amount of tries. There are also libraries for preventing brute force attacks like `django-axes` and `django-defender`. In addition, using two-factor authentication and requiring users to use strong passwords are effective ways to prevent brute force attacks.


FLAW 4: A3 (2017) Sensitive Data Exposure

Description of flaw 4:

Currently all the passwords of users are stored as plain text in the database. This is extremely unsafe, since if attackers get access to the database, they could get easily Sensitive data from the database. One notable point is that some type of sensitive data are required by law to protect them by storing them in encrypted format. For example, Payment Card Industry Data Security Standard requires credit cards to be encrypted always.

Fix to flaw 4:

The easiest fix for this is to use django's built-in User model `django.contrib.auth.User` that is using PBKDF2 algorithm to store passwords by default and has possibility to check passwords stored with PBKDF2SHA1, argon2 and bcrypt.
Another way to fix this issue is to encrypt passwords by using `django.core.signing` module. New user could be created with encrypted password:
`from django.core.signing import dumps`
`user = User(username="new_user", password=dumps("new_user_password"))`
`user.save()`

and decrypted when handling login action: https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/views.py#L7, https://github.com/TanakaAkihiro/Cyber-Security-Project1/blob/main/mysite/simplebank/views.py#L60


FLAW 5: A7 (2017) Cross-Site Scripting (XSS)

Description of flaw 5:

